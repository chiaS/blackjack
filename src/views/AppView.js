// Generated by CoffeeScript 1.8.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.AppView = (function(_super) {
  __extends(AppView, _super);

  function AppView() {
    return AppView.__super__.constructor.apply(this, arguments);
  }

  AppView.prototype.className = 'app-view';

  AppView.prototype.template = _.template('<section class="scoreSection"></section> <div class="dealer-hand-container"></div> <div class="player-hand-container"></div> <button class="restart">Restart</button> <button class="hit-button">Hit</button> <button class="stand-button">Stand</button>');

  AppView.prototype.events = {
    'click .hit-button': function() {
      this.playerPlay();
      this.model.get('playerHand').hit();
      return this.playerPlay();
    },
    'click .stand-button': function() {
      $(".hit-button, .stand-button").attr('disabled', true);
      this.model.get('dealerHand').stand();
      return this.dealerPlay();
    },
    'click .restart': function() {
      this.remove();
      return new AppView({
        model: new App()
      }).$el.appendTo('body');
    }
  };

  AppView.prototype.initialize = function() {
    this.scoreView = new ScoreView({
      model: this.model
    });
    this.playerView = new HandView({
      collection: this.model.get('playerHand')
    }).el;
    this.dealerView = new HandView({
      collection: this.model.get('dealerHand')
    }).el;
    return this.render();
  };

  AppView.prototype.render = function() {
    this.$el.children().detach();
    this.$el.html(this.template());
    this.$('.dealer-hand-container').html(this.dealerView);
    this.$('.player-hand-container').html(this.playerView);
    return this.$('.scoreSection').html(this.scoreView.el);
  };

  AppView.prototype.dealerPlay = function() {
    while (this.model.get('dealerHand').scores()[0] < 17 && this.model.get('dealerHand').scores()[1] < 17) {
      this.model.get('dealerHand').hit();
    }
    return this.model.get('dealerHand').trigger('reveal:dealer');
  };

  AppView.prototype.playerPlay = function() {
    if (this.model.get("playerHand").finalScore() >= 21) {
      this.scoreView.earlyResult();
    }
  };

  return AppView;

})(Backbone.View);
